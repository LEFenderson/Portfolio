\documentclass{article}
\usepackage[top=0.8in, left=0.9in, right=0.9in, bottom=0.8in]{geometry}
\usepackage{natbib}
\usepackage{listings}
\usepackage[usenames,dvipsnames]{xcolor} 
\usepackage{showexpl}
\lstset{ 
  language=R,                     % the language of the code
  basicstyle=\small\rmfamily, % the size of the fonts that are used for the code
  %numbers=left,                   % where to put the line-numbers
  %numberstyle=\tiny\color{Blue},  % the style that is used for the line-numbers
  %stepnumber=1,                   % the step between two line-numbers. If it is 1, each line
                                  % will be numbered
  %numbersep=5pt,                  % how far the line-numbers are from the code
  backgroundcolor=\color{white},  % choose the background color. You must add \usepackage{color}
  showspaces=false,               % show spaces adding particular underscores
  showstringspaces=false,         % underline spaces within strings
  showtabs=false,                 % show tabs within strings adding particular underscores
  frame=single,                   % adds a frame around the code
  rulecolor=\color{black},        % if not set, the frame-color may be changed on line-breaks within not-black text (e.g. commens (green here))
  tabsize=2,                      % sets default tabsize to 2 spaces
  captionpos=b,                   % sets the caption-position to bottom
  breaklines=true,                % sets automatic line breaking
  breakatwhitespace=false,        % sets if automatic breaks should only happen at whitespace
  keywordstyle=\color{RoyalBlue},      % keyword style
  commentstyle=\color{YellowGreen},   % comment style
  stringstyle=\color{ForestGreen},      % string literal style
  linewidth=16cm
} 
\usepackage[colorlinks]{hyperref}
\AtBeginDocument{%
  \hypersetup{
    citecolor=Violet,
    linkcolor=green!50!black,   
    urlcolor=blue!80!black,
    runcolor=violet!70!black}}

\begin{document}
\SweaveOpts{concordance=TRUE}
\begin{center}
\textbf{\huge SALS microsatellite population structure manuscript - breeding marsh landscape characteristics PCA}
\end{center}
\newcommand*{\MyPath}{/Users/Lindsey/Documents/ModernSparrowGenomics}
The below information contains a complete record of the data sources, input file generation and structure, analysis and Rcode, output data and/or figures generated, and session information I used to complete the above title-referenced analysis for publication.

The following can also be compiled in RStudio from the file \href{run:\MyPath/Copies of Associated ELN files/RLaTeX/SALSusat-EnvPCA.Rnw}{SALSusat-EnvPCA.Rnw}

\textbf{Motivation:} Presented below is a PCA to visualize the environmental differences among saltmarsh sparrow breeding marshes and the population clusters identified in this paper.  Apparently this was done at some point by Jen Walsh, but was lost, so I have run it here in order to generate the final figure in vector format for publication; as well as to more fully document the data \& analysis for posterity.

\textbf{Add required packages:}
\begin{lstlisting}[linerange=\\begin\{Sinput\}-\\end\{Sinput\},includerangemarker=false, language=R]

<<>>=
library(extrafont)
library(ggbiplot)
@
\end{lstlisting}

\textbf{Read in data*:}
\begin{lstlisting}[linerange=\\begin\{Sinput\}-\\end\{Sinput\},includerangemarker=false, language=R]

<<>>=
ARHab <- read.table("~/Documents/ModernSparrowGenomics/Copies of Associated ELN files/SALS usat ms/Data and Analyses/Rhabitat4.txt", header = TRUE)
@
\end{lstlisting}

\textbf{*Documentation of data sources and structure:}

1.) File \href{run:\MyPath/Copies of Associated ELN files/SALS usat ms/Data and Analyses/Rhabitat4.txt}{\underline{Rhabitat4.txt}}. 

\textit{Source:} These data were generated in Genalex (verified using GenAlEx v. 6.51b2) based on the decimal degree coordinates for each marsh found on the 'Coords' tab in the \href{run:\MyPath/Copies of Associated ELN files/SALS usat ms/Data and Analyses/SHARP Marsh Coords.xlsx}{SHARP Marsh Coords.xlsx} file. I'm not sure who originally generated this file (dated July 29, 2016) or supplied the marsh coordinates, presumably Jen Walsh, Adrienne Kovach or maybe Bri Benvenuti. The output (GGD tab of above file) was generated using the Genalex options Distance -> Geographic... and options as shown below to calculate the pairwise distances according to the formula used by Genalex noted in the manual \href{run:\MyPath/Copies of Associated ELN files/Reference Materials/Genalex 6.502 Appendix 1.pdf}{(Genalex 6.502 Appendix 1)}: "GenAlEx uses a modification of the Haversine Formula developed by R.W. Sinnott (Virtues of the Haversine (1984) Sky and Telescope 68,159) following computer code published online by Bob Chamberlain from JPL, NASA. (http://www.usenet-replayer.com/faq/comp.infosystems.gis.html still available on 12/12/12). Distances calculated via Lat/Long coordinators are returned in km." According to Wikipedia, \href{https://en.wikipedia.org/wiki/Haversine_formula}{the Haversine formula} calculates great-circle distance, \textit{not} Euclidean distance. This text file is a copy of the GGD tab, formatted for R (Genalex-specific formatting and column headers removed; blank fields in the upper triangle and self-pair distances of 0.000 changed to 'NA').
	
\textit{Data structure:} Triangular matrix of pairwise geographic distance values.

\textit{Data units:} Kilometers

\textit{Data snippet:}
<<>>=
head(ARHab, n = 5L)
@


\newpage
\textbf{Run PCA:}
\begin{lstlisting}[linerange=\\begin\{Sinput\}-\\end\{Sinput\},includerangemarker=false, language=R]
<<>>=
HAB.pca <- prcomp(ARHab[,c(8:14,21,23)], center = TRUE,scale. = TRUE)
@
\end{lstlisting}

\textbf{Printout of results:}
\begin{lstlisting}[linerange=\\begin\{Sinput\}-\\end\{Sinput\},includerangemarker=false, language=R]
<<>>=
HAB.pca
@
\end{lstlisting}

\lstinputlisting{/Users/Lindsey/Documents/ModernSparrowGenomics/Copies of Associated ELN files/SALS usat ms/Data and Analyses/Manteloutput.txt}

\textbf{Format final figure for publication:}
\begin{lstlisting}[linerange=\\begin\{Sinput\}-\\end\{Sinput\},includerangemarker=false, language=R]

<<>>=
rownames(HAB.pca$rotation) <- c("Sea Level Trend", "% High Marsh", "% Surrounding Natural Lands", "% Surrounding Ag Lands", "% Surrounding Developed", "% Surrounding Open Water", "% Surrounding Marsh Lands", "Proximity Index", "Distance to Atlantic Coast")

Pop.reorder <-  factor(ARHab$Pop, levels = c("NJ-Long_IslandNY", "SAW", "Four_Sparrow", "IDL", "CTMonomoy", "RI", "Great_MarshNHMA_Furb_Scarb", "GreatBayNH_Eldridge", "SouthernME"))

labels <- c("OC-Mullica"="OC-Mullica", "ATT"="ATT", "Sawmill"="Sawmill", "Four_Sparrow"="Four Sparrow", "Idlewild"="Idlewild", "Marine_Nature_Center"="Marine Nature Center", "Long_Island"="Wertheim", "East_River"="East River", "Hammonasset"="Hammonasset", "Barn_Island"="Barn Island", "Chaffee"="Chafee", "Sachuest"="Sachuest", "Monomoy"="Monomoy", "Parker_River"="Parker River", "Hampton"="Hampton", "Fairhill"="Fairhill", "Chapman's_Landing"="Chapman's Landing", "Lubberland_Creek"="Lubberland Creek", "Furbish"="Furbish", "Eldridge"="Eldridge", "Little_River"="Little River", "Jones"="Jones", "Scarborough"="Scarborough", "Spurwink"="Spurwink")

#How cool! Learned how to edit R programs/functions - see https://stackoverflow.com/questions/25995173/specifying-colour-transparency-and-position-of-arrows-line-segments-in-ggbipl
#Get the function code, copy to text editor to edit as needed. 
#Assign function code with edits to new function:
ggbiplot2 <- function (pcobj, choices = 1:2, scale = 1, pc.biplot = TRUE, 
     obs.scale = 1 - scale, var.scale = scale, groups = NULL, 
     ellipse = FALSE, ellipse.prob = 0.68, labels = NULL, labels.size = 3, 
     alpha = 1, var.axes = TRUE, circle = FALSE, circle.prob = 0.69, 
     varname.size = 3, varname.adjust = 1.5, varname.abbrev = FALSE, color = ("darkgray"),
           linetype = "solid",
           alpha_arrow = 1,
     ...) 
 {
     library(ggplot2)
     library(plyr)
     library(scales)
     library(grid)
     stopifnot(length(choices) == 2)
     if (inherits(pcobj, "prcomp")) {
         nobs.factor <- sqrt(nrow(pcobj$x) - 1)
         d <- pcobj$sdev
         u <- sweep(pcobj$x, 2, 1/(d * nobs.factor), FUN = "*")
         v <- pcobj$rotation
     }
     else if (inherits(pcobj, "princomp")) {
         nobs.factor <- sqrt(pcobj$n.obs)
         d <- pcobj$sdev
         u <- sweep(pcobj$scores, 2, 1/(d * nobs.factor), FUN = "*")
         v <- pcobj$loadings
     }
     else if (inherits(pcobj, "PCA")) {
         nobs.factor <- sqrt(nrow(pcobj$call$X))
         d <- unlist(sqrt(pcobj$eig)[1])
         u <- sweep(pcobj$ind$coord, 2, 1/(d * nobs.factor), FUN = "*")
         v <- sweep(pcobj$var$coord, 2, sqrt(pcobj$eig[1:ncol(pcobj$var$coord), 
             1]), FUN = "/")
     }
     else if (inherits(pcobj, "lda")) {
         nobs.factor <- sqrt(pcobj$N)
         d <- pcobj$svd
         u <- predict(pcobj)$x/nobs.factor
         v <- pcobj$scaling
         d.total <- sum(d^2)
     }
     else {
         stop("Expected a object of class prcomp, princomp, PCA, or lda")
     }
     choices <- pmin(choices, ncol(u))
     df.u <- as.data.frame(sweep(u[, choices], 2, d[choices]^obs.scale, 
         FUN = "*"))
     v <- sweep(v, 2, d^var.scale, FUN = "*")
     df.v <- as.data.frame(v[, choices])
     names(df.u) <- c("xvar", "yvar")
     names(df.v) <- names(df.u)
     if (pc.biplot) {
         df.u <- df.u * nobs.factor
     }
     r <- sqrt(qchisq(circle.prob, df = 2)) * prod(colMeans(df.u^2))^(1/4)
     v.scale <- rowSums(v^2)
     df.v <- r * df.v/sqrt(max(v.scale))
     if (obs.scale == 0) {
         u.axis.labs <- paste("standardized PC", choices, sep = "")
     }
     else {
         u.axis.labs <- paste("PC", choices, sep = "")
     }
     u.axis.labs <- paste(u.axis.labs, sprintf("(%0.1f%% explained var.)", 
         100 * pcobj$sdev[choices]^2/sum(pcobj$sdev^2)))
     if (!is.null(labels)) {
         df.u$labels <- labels
     }
     if (!is.null(groups)) {
         df.u$groups <- groups
     }
     if (varname.abbrev) {
         df.v$varname <- abbreviate(rownames(v))
     }
     else {
         df.v$varname <- rownames(v)
     }
     df.v$angle <- with(df.v, (180/pi) * atan(yvar/xvar))
     df.v$hjust = with(df.v, (1 - varname.adjust * sign(xvar))/2)
     g <- ggplot(data = df.u, aes(x = xvar, y = yvar)) + xlab(u.axis.labs[1]) + 
         ylab(u.axis.labs[2]) + coord_equal()
     if (var.axes) {
         if (circle) {
             theta <- c(seq(-pi, pi, length = 50), seq(pi, -pi, 
                 length = 50))
             circle <- data.frame(xvar = r * cos(theta), yvar = r * 
                 sin(theta))
             g <- g + geom_path(data = circle, color = muted("white"), 
                 size = 1/2, alpha = 1/3)
         }
         g <- g + geom_segment(data = df.v, aes(x = 0, y = 0, 
             xend = xvar, yend = yvar), arrow = arrow(length = unit(1/2, 
             "picas")), color = color, linetype = linetype, alpha = alpha_arrow)
     }
     if (!is.null(df.u$labels)) {
         if (!is.null(df.u$groups)) {
             g <- g + geom_text(aes(label = labels, color = groups), 
                 size = labels.size)
         }
         else {
             g <- g + geom_text(aes(label = labels), size = labels.size)
         }
     }
     else {
         if (!is.null(df.u$groups)) {
             g <- g + geom_point(aes(color = groups), alpha = alpha)
         }
         else {
             g <- g + geom_point(alpha = alpha)
         }
     }
     if (!is.null(df.u$groups) && ellipse) {
         theta <- c(seq(-pi, pi, length = 50), seq(pi, -pi, length = 50))
         circle <- cbind(cos(theta), sin(theta))
         ell <- ddply(df.u, "groups", function(x) {
             if (nrow(x) <= 2) {
                 return(NULL)
             }
             sigma <- var(cbind(x$xvar, x$yvar))
             mu <- c(mean(x$xvar), mean(x$yvar))
             ed <- sqrt(qchisq(ellipse.prob, df = 2))
             data.frame(sweep(circle %*% chol(sigma) * ed, 2, 
                 mu, FUN = "+"), groups = x$groups[1])
         })
         names(ell)[1:2] <- c("xvar", "yvar")
         g <- g + geom_path(data = ell, aes(color = groups, group = groups))
     }
     if (var.axes) {
         g <- g + geom_text(data = df.v, aes(label = varname, 
             x = xvar, y = yvar, angle = angle, hjust = hjust), 
             color = color, size = varname.size)
     }
     return(g)
 }
#Apply new functionality!
##PC12A <- ggbiplot2(HAB.pca, ellipse=TRUE, labels=labels, groups=Pop.reorder, color = "blue", varname.adjust=1.1) + aes(family = "Constantia", fontface = "bold")

##PC12B <- PC12A + xlim(-2.15, 2.6) + ylim(-2.75, 2.5) + theme_bw() + scale_color_manual(name = "Population Genetic Cluster", labels = c("New Jersey & Long Island, NY Marshes", "Sawmill", "Four Sparrow", "Idlewild", "Connecticut Marshes & Monomoy Island", "Rhode Island Marshes", "Great Marshes (NH & MA), Furbish & Scarborough, ME", "Great Bay, New Hampshire Marshes & Eldridge, ME", "Southern Maine Marshes"), values = c("#FF0075", "#6C3E1E", "yellowgreen", "darkorange", "#D11F2A", "#002060", "#4A9B82", "#7FC1DB", "#57277C")) + theme(text = element_text(family = "Constantia", color = "grey20",size=15))

PC12A <- ggbiplot2(HAB.pca,ellipse=TRUE, choices=c(1,2), labels=labels, groups=Pop.reorder, labels.size = 3, varname.size = 3, color = "grey30", varname.adjust=1.1, varname.color = "grey30")+ aes(family = "Constantia", fontface = "bold")
PC12B <- PC12A + xlim(-2.5, 2.75) + ylim(-3, 2.7) + theme_bw() + scale_color_manual(name = "Population Genetic Cluster", labels = c("New Jersey & Long Island, NY Marshes", "Sawmill", "Four Sparrow", "Idlewild", "Connecticut Marshes & Monomoy Island", "Rhode Island Marshes", "Great Marshes (NH & MA), Furbish & Scarborough, ME", "Great Bay, New Hampshire Marshes & Eldridge, ME", "Southern Maine Marshes"), values = c("#FF0075", "#6C3E1E", "yellowgreen", "darkorange", "#D11F2A", "#002060", "#4A9B82", "#7FC1DB", "#57277C")) + theme(text = element_text(family = "Constantia", color = "grey20",size=15))

PC13A <- ggbiplot2(HAB.pca,ellipse=TRUE, choices=c(1,3), labels=labels, groups=Pop.reorder, labels.size = 3, varname.size = 3, color = "grey30", varname.adjust=1.1, varname.color = "grey30")+ aes(family = "Constantia", fontface = "bold")
PC13B <- PC13A + xlim(-2.5, 2.75) + ylim(-2.25, 3.25) + theme_bw() + scale_color_manual(name = "Population Genetic Cluster", labels = c("New Jersey & Long Island, NY Marshes", "Sawmill", "Four Sparrow", "Idlewild", "Connecticut Marshes & Monomoy Island", "Rhode Island Marshes", "Great Marshes (NH & MA), Furbish & Scarborough, ME", "Great Bay, New Hampshire Marshes & Eldridge, ME", "Southern Maine Marshes"), values = c("#FF0075", "#6C3E1E", "yellowgreen", "darkorange", "#D11F2A", "#002060", "#4A9B82", "#7FC1DB", "#57277C")) + theme(text = element_text(family = "Constantia", color = "grey20",size=15))

var_explained_df <- data.frame(PC= paste0("PC",1:9), var_explained=(HAB.pca$sdev)^2/sum((HAB.pca$sdev)^2))
Scree <- ggplot(var_explained_df, aes(x=PC, y=var_explained)) + geom_bar(stat = "identity") + theme_bw() + theme(text = element_text(family = "Constantia", color = "grey20",size=15)) + xlab("PC Axis") + ylab("Percent Variance Explained")
@
\end{lstlisting}

\textbf{Save final figure:}
\begin{lstlisting}[linerange=\\begin\{Sinput\}-\\end\{Sinput\},includerangemarker=false, language=R]
<<>>=
ggsave(file = "/Users/Lindsey/Documents/ModernSparrowGenomics/Copies of Associated ELN files/SALS usat ms/Final Figures/EnvPCAFinalPC12.pdf", plot = PC12B, device = cairo_pdf, width = 10, units = "in")
ggsave(file = "/Users/Lindsey/Documents/ModernSparrowGenomics/Copies of Associated ELN files/SALS usat ms/Final Figures/EnvPCAFinalPC13.pdf", plot = PC13B, device = cairo_pdf, width = 10, units = "in")
ggsave(file = "/Users/Lindsey/Documents/ModernSparrowGenomics/Copies of Associated ELN files/SALS usat ms/Final Figures/EnvPCAFinalScree.pdf", plot = Scree, device = cairo_pdf, width = 6.5, units = "in")
@
\end{lstlisting}
\newpage
\textbf{Copy of resulting \href{run:\MyPath/Copies of Associated ELN files/SALS usat ms/Final Figures/EnvPCAFinalPC12.pdf}{EnvPCAFinalPC12.pdf} plot:}

\includegraphics[width=0.90\textwidth]{/Users/Lindsey/Documents/ModernSparrowGenomics/Copies of Associated ELN files/SALS usat ms/Final Figures/EnvPCAFinalPC12.pdf}

\textbf{Copy of resulting \href{run:\MyPath/Copies of Associated ELN files/SALS usat ms/Final Figures/EnvPCAFinalPC13.pdf}{EnvPCAFinalPC13.pdf} plot:}

\includegraphics[width=0.90\textwidth]{/Users/Lindsey/Documents/ModernSparrowGenomics/Copies of Associated ELN files/SALS usat ms/Final Figures/EnvPCAFinalPC13.pdf}

\textbf{Copy of resulting \href{run:\MyPath/Copies of Associated ELN files/SALS usat ms/Final Figures/EnvPCAFinalScree.pdf}{EnvPCAFinalScree.pdf} plot:}

\includegraphics[width=0.90\textwidth]{/Users/Lindsey/Documents/ModernSparrowGenomics/Copies of Associated ELN files/SALS usat ms/Final Figures/EnvPCAFinalScree.pdf}
\newpage
\textbf{Record of Session Info:}

<<>>=
sessionInfo()
@

\bibliographystyle{plainnat}
\bibliography{AllReferencesAvailable.bib}
\end{document}
