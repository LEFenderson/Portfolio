\documentclass{article}
\usepackage[top=0.8in, left=0.9in, right=0.9in, bottom=0.8in]{geometry}
\usepackage{natbib}
\usepackage{listings}
\usepackage[usenames,dvipsnames]{xcolor} 
\usepackage{showexpl}
\lstset{ 
  language=R,                     % the language of the code
  basicstyle=\small\rmfamily, % the size of the fonts that are used for the code
  %numbers=left,                   % where to put the line-numbers
  %numberstyle=\tiny\color{Blue},  % the style that is used for the line-numbers
  %stepnumber=1,                   % the step between two line-numbers. If it is 1, each line
                                  % will be numbered
  %numbersep=5pt,                  % how far the line-numbers are from the code
  backgroundcolor=\color{white},  % choose the background color. You must add \usepackage{color}
  showspaces=false,               % show spaces adding particular underscores
  showstringspaces=false,         % underline spaces within strings
  showtabs=false,                 % show tabs within strings adding particular underscores
  frame=single,                   % adds a frame around the code
  rulecolor=\color{black},        % if not set, the frame-color may be changed on line-breaks within not-black text (e.g. commens (green here))
  tabsize=2,                      % sets default tabsize to 2 spaces
  captionpos=b,                   % sets the caption-position to bottom
  breaklines=true,                % sets automatic line breaking
  breakatwhitespace=false,        % sets if automatic breaks should only happen at whitespace
  keywordstyle=\color{RoyalBlue},      % keyword style
  commentstyle=\color{YellowGreen},   % comment style
  stringstyle=\color{ForestGreen},      % string literal style
  linewidth=16cm
} 
\usepackage[colorlinks]{hyperref}
\AtBeginDocument{%
  \hypersetup{
    citecolor=Violet,
    linkcolor=green!50!black,   
    urlcolor=blue!80!black,
    runcolor=violet!70!black}}

\begin{document}
\SweaveOpts{concordance=TRUE}
\begin{center}
\textbf{\huge SALS microsatellite population structure manuscript - Map figure documentation}
\end{center}
\newcommand*{\MyPath}{/Users/Lindsey/Documents/ModernSparrowGenomics}
The below information contains a complete record of the data sources, input file generation and structure, analysis and Rcode, output data and/or figures generated, and session information I used to complete the above title-referenced analysis for publication.

The following can also be compiled in RStudio from the file \href{run:SALSusat-Map.Rnw}{SALSusat-Map.Rnw}

\textbf{Motivation:} Presented below is a map of the 24 breeding sites sampled in this paper. The output of the below figure should be essentially identical to the old figure given to me by Adrienne (see page 2 of file \href{run:\MyPath/Copies of Associated ELN files/SALS usat ms/Research Log Documents/SALS PopGen Summary 2-2018.pdf}{SALS PopGen Summary 2-2018.pdf}, from February 4, 2018 or slide/page 13 of file \href{run:\MyPath/Copies of Associated ELN files/SALS usat ms/Research Log Documents/SHARP - metapop gen PI retreat.pdf}{SHARP - metapop gen PI retreat.pdf}, from August 17, 2016). I have only rerun it here in order to make the final figure a vector format and cleaned up to be more suitable for publication; as well as to more fully document the figure generation for posterity.

\textbf{Add required packages:}
\begin{lstlisting}[linerange=\\begin\{Sinput\}-\\end\{Sinput\},includerangemarker=false, language=R]

<<>>=
library(ggplot2)
library(ggrepel)
library(ggspatial)
library(sf)
library(rnaturalearth)
library(maps)
library(cowplot)
#library(tools)
library(dplyr)
@
\end{lstlisting}

\textbf{Read in data*:}
\begin{lstlisting}[linerange=\\begin\{Sinput\}-\\end\{Sinput\},includerangemarker=false, language=R]

<<>>=
sites <- read.table("SiteCoords.txt", header = TRUE)
@
\end{lstlisting}

\textbf{*Documentation of data sources and structure:}

1.) File \href{run:SiteCoords.txt}{\underline{SiteCoords.txt}}. 

\textit{Source:} These data are the decimal degree coordinates for each marsh found on the 'Coords' tab in the \href{run:\MyPath/Copies of Associated ELN files/SALS usat ms/Data and Analyses/SHARP Marsh Coords.xlsx}{SHARP Marsh Coords.xlsx} file. I'm not sure who originally generated this file (dated July 29, 2016) or supplied the marsh coordinates, presumably Jen Walsh, Adrienne Kovach or maybe Bri Benvenuti. This text file is a copy of the Coords tab, formatted for R (Genalex-specific formatting removed, spaces in site names replaced with underscores).
	
\textit{Data structure:} Rectangular matrix of latitude ("Y") and longitude ("X") coordinates for each breeding marsh studied here ("Site")

\textit{Data units:} Decimal degrees

\textit{Data snippet:}
<<>>=
head(sites)
@

\textbf{Convert coordinates to spatial vector object:}
\begin{lstlisting}[linerange=\\begin\{Sinput\}-\\end\{Sinput\},includerangemarker=false, language=R]
<<>>=
(sites <- st_as_sf(sites, coords = c("X", "Y"), remove = FALSE, 
    crs = 4326, agr = "constant"))
@
\end{lstlisting}

Notes on above code:

remove = a logical (true/false) argument for whether or not to remove the coordinate columns from data frame.

crs = coordinate reference system; the number 4326 refers to EPSG:4326, which is the European Petroleum Survey Group code for the World Geodetic System 1984 (WGS84) datum.

From the \href{run:\MyPath/Copies of Associated ELN files/Reference Materials/sf.pdf}{'sf' R package documentation} vignette: "agr, attribute-geometry-relationship, specifies for each non-geometry attribute column how it re-lates to the geometry, and can have one of following values:  "constant", "aggregate", "identity"."constant" is used for attributes that are constant throughout the geometry (e.g.  land use)" - or in this case, the site names.

\textbf{Setup site names formatting and designation of hybrid zone sites:}
\begin{lstlisting}[linerange=\\begin\{Sinput\}-\\end\{Sinput\},includerangemarker=false, language=R]
<<>>=
labels <- c("Spurwink"="Spurwink", "Scarborough"="Scarborough", "Jones"="Jones",  "Little_River"="Little River", "Eldridge"="Eldridge", "Furbish"="Furbish", "Lubberland"="Lubberland Creek", "Chapmans"="Chapman's Landing", "Fairhill"="Fairhill", "Hampton"="Hampton", "Parker_River"="Parker River", "Monomoy"="Monomoy", "Sachuest"="Sachuest", "Chafee"="Chafee", "Barn_Island"="Barn Island", "East_River"="East River", "Hammonasset"="Hammonasset", "Shirley"="Wertheim", "Idlwild"="Idlewild", "MNC"="Marine Nature Center", "Sawmill"="Sawmill", "Four_Sparrow"="Four Sparrow", "ATT"="ATT", "OC-MU"="OC-Mullica")

HybridSites <- subset(sites,Site %in% c("Spurwink" , "Scarborough", "Jones", "Little_River", "Eldridge", "Furbish", "Lubberland", "Chapmans", "Fairhill", "Hampton", "Parker_River"))
@
\end{lstlisting}

\textbf{Create main map:}
\begin{lstlisting}[linerange=\\begin\{Sinput\}-\\end\{Sinput\},includerangemarker=false, language=R]
<<>>=
world <- ne_countries(scale = "medium", returnclass = "sf")
states <- st_as_sf(map("state", plot = FALSE, fill = TRUE))
states2 <- states %>% filter(ID %in% c(
  "maine", "new hampshire", "vermont", "connecticut", "rhode island", "massachusetts", "new york", "new jersey"
))
sf::sf_use_s2(FALSE)
states2 <- cbind(states2, st_coordinates(st_centroid(states2)))
#states2$ID <- toTitleCase(states2$ID)
states2$ID <- toupper(states2$ID)
states2$nudge_y <- 0.0001
states2$nudge_y[states2$ID == "NEW YORK"] <- -0.5
states2$nudge_y[states2$ID == "MAINE"] <- -1.5
states2$nudge_y[states2$ID == "CONNECTICUT"] <- 0.05
states2$nudge_y[states2$ID == "MASSACHUSETTS"] <- 0.1
states2$nudge_y[states2$ID == "NEW HAMPSHIRE"] <- -0.1
map2 <- ggplot(data = world) + geom_sf(fill = "#456462") + geom_sf(data = states2, fill = "#456462") + geom_text(data = states2, aes(X, Y, label = ID), size = 3, colour = "#595959", family = "Constantia", nudge_y = states2$nudge_y) + geom_sf(data = sites, size = 3, shape = 23, fill = "darkred") + geom_sf(data = HybridSites, size = 3, shape = 23, fill = "darkblue") + geom_text_repel(data = sites, aes(x = X, y = Y, label = labels, family = "Constantia"),  fontface = "bold", direction = "both", min.segment.length = 0.2, nudge_x = c(0.25, 0.25, 0.25, 0.25)) + xlab("Longitude") + ylab("Latitude") + coord_sf(xlim = c(-74.85, -69.05), ylim = c(39.25, 43.87), expand = FALSE) + annotation_scale(location = "br", width_hint = 0.3, text_cex = 1, text_family = "Constantia") + annotation_north_arrow(location = "br", which_north = "true", pad_x = unit(0.31, "in"), pad_y = unit(0.25, "in"), style = north_arrow_nautical(text_size = 11, text_face = "bold", text_family = "Constantia")) + theme(axis.title.x = element_text(size = 15, family = "Constantia"), axis.text.x = element_text(size = 10, family = "Constantia"), axis.title.y = element_text(size = 16, family = "Constantia"), axis.text.y = element_text(size = 10, family = "Constantia"), panel.background = element_rect(fill = "aliceblue"))
@
\end{lstlisting}

Notes on above code:

sf::sf\_use\_s2(FALSE) = there was some kind of error when trying to extract the centroid coordinates from the states object for adding state labels; this appears to be a bug in sf version 2, so that line reverts the program back to version 1 (see \href{https://stackoverflow.com/questions/68478179/how-to-resolve-spherical-geometry-failures-when-joining-spatial-data}{this answer on stackoverflow})

toupper = converts text in an object field to uppercase. (FYI - can use 'toTitleCase' after installing the 'tools' package to convert to title case.)

nudge\_y = allows you to set individual aesthetics, in this case, specify exact postioning of the text labels so they "look" more centered geographically. (Use nudge\_x to shift labels left or right.)

geom\_sf = draws geometric objects, such as the state polygons and site points.

geom\_text\_repel = keeps labels from overlapping one another

coord\_sf = sets the scale/viewed area of the map based on bounding latitude-longitude coordinates.

annotation\_scale = inserts the scale bar in the bottom right corner ("br")

annotation\_north\_arrow = inserts a north arrow (can be set to true or magnetic north) in the bottom right; the padding adjusts the placement so it doesn't overlap the scale bar.

\textbf{Create inset map:}
\begin{lstlisting}[linerange=\\begin\{Sinput\}-\\end\{Sinput\},includerangemarker=false, language=R]
<<>>=
usa <- subset(world, admin == "United States of America")
(mainland <- ggplot(data = usa) + geom_sf(fill = "#456462") + geom_rect(xmin = 2135380.81, xmax = 2444854.36, ymin = -309447.13, ymax = 359165.16, fill = NA, colour = "black", size = 1) + theme_void() + theme(panel.background = element_rect(fill = "aliceblue")) + coord_sf(crs = st_crs(2163), xlim = c(-2000000, 2500000), ylim = c(-2300000, 730000)))
@
\end{lstlisting}
Notes on above code:

geom\_rect - draws the inset rectangle. I used the same bounding coordinates as were set for the main map (xlim = c(-74.85, -69.05), ylim = c(39.25, 43.87)), however since a different projection is used on the smaller scale map of the US, the decimal degrees had to be converted to the different projection.

*Handy resource for getting transformed coordinates among projections:
\href{https://epsg.io/transform}{https://epsg.io/transform}

EPSG:2163 - US National Atlas Equal Area - "Unspecified datum based upon the Clarke 1866 Authalic Sphere"
\newpage
\textbf{Format final figure for publication:}
\begin{lstlisting}[linerange=\\begin\{Sinput\}-\\end\{Sinput\},includerangemarker=false, language=R]
<<>>=
FinalMap <- ggdraw(map2) +draw_plot(mainland, width = 0.43, height = 0.5, x = 0.02, y = 0.583)
@
\end{lstlisting}

\textbf{Save final figure:}
\begin{lstlisting}[linerange=\\begin\{Sinput\}-\\end\{Sinput\},includerangemarker=false, language=R]
<<>>=
ggsave(file = "FinalMap.pdf", plot = FinalMap, device = cairo_pdf, width = 6.5, units = "in")
@
\end{lstlisting}

\textbf{Copy of resulting \href{run:FinalMap.pdf}{FinalMap.pdf} plot:}

\includegraphics[width=0.90\textwidth]{FinalMap.pdf}
\newpage
\textbf{Record of Session Info:}

<<>>=
sessionInfo()
@

\end{document}
